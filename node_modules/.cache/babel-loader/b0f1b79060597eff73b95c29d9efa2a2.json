{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Todo/src/todo/TodoList.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport PropTypes from \"prop-types\";\nimport Todo from \"./Todo\";\n\nconst TodoList = (props, {\n  store\n}) => {\n  console.log('<TodoList> TodoList Created: props: ' + _objectSpread({}, props));\n  const state = store.getState();\n  console.log('<TodoList> state: ' + _objectSpread({}, state) + ', todos: ' + state.todos + ', filter: ' + state.visibilityFilter);\n  getVisibleTodos(state.todos, state.visibilityFilter).map(todo => {\n    console.log('<TodoList> text: ' + todo.text);\n  });\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    id: 'todoList',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, getVisibleTodos(state.todos, state.visibilityFilter).map(todo => /*#__PURE__*/React.createElement(Todo, Object.assign({\n    key: todo.id\n  }, todo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }))));\n};\n\nTodoList.contextTypes = {\n  store: PropTypes.object\n};\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n\n    default:\n      return todos;\n  }\n};\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Todo/src/todo/TodoList.js"],"names":["React","PropTypes","Todo","TodoList","props","store","console","log","state","getState","todos","visibilityFilter","getVisibleTodos","map","todo","text","id","contextTypes","object","filter","t","completed"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQ;AAAEC,EAAAA;AAAF,CAAR,KAAsB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,2DAA6CH,KAA7C,CAAZ;AACA,QAAMI,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAd;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,yCAA2BC,KAA3B,IAAoC,WAApC,GAAkDA,KAAK,CAACE,KAAxD,GAAgE,YAAhE,GAA+EF,KAAK,CAACG,gBAAjG;AACAC,EAAAA,eAAe,CAACJ,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,gBAApB,CAAf,CAAqDE,GAArD,CAAyDC,IAAI,IAC1D;AAAER,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBO,IAAI,CAACC,IAAvC;AAA8C,GADnD;AAGG,sBACA;AAAI,IAAA,EAAE,EAAE,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIH,eAAe,CAACJ,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,gBAApB,CAAf,CAAqDE,GAArD,CAAyDC,IAAI,iBAC3D,oBAAC,IAAD;AACG,IAAA,GAAG,EAAEA,IAAI,CAACE;AADb,KAEOF,IAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADJ,CADA;AAUL,CAjBD;;AAkBAX,QAAQ,CAACc,YAAT,GAAwB;AACrBZ,EAAAA,KAAK,EAAEJ,SAAS,CAACiB;AADI,CAAxB;;AAIA,MAAMN,eAAe,GAAG,CAACF,KAAD,EAAQS,MAAR,KAAmB;AACxC,UAAQA,MAAR;AACG,SAAK,gBAAL;AACG,aAAOT,KAAK,CAACS,MAAN,CACJC,CAAC,IAAIA,CAAC,CAACC,SADH,CAAP;;AAGH,SAAK,aAAL;AACG,aAAOX,KAAK,CAACS,MAAN,CACJC,CAAC,IAAI,CAACA,CAAC,CAACC,SADJ,CAAP;;AAGH;AACG,aAAOX,KAAP;AAVN;AAYF,CAbD;;AAeA,eAAeP,QAAf","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport PropTypes from \"prop-types\";\n\nimport Todo from \"./Todo\";\n\nconst TodoList = (props, { store }) => {\n   console.log('<TodoList> TodoList Created: props: ' + {...props})\n   const state = store.getState();\n   console.log('<TodoList> state: ' + {...state} + ', todos: ' + state.todos + ', filter: ' + state.visibilityFilter);\n   getVisibleTodos(state.todos, state.visibilityFilter).map(todo =>\n      { console.log('<TodoList> text: ' + todo.text) });\n\n      return (\n      <ul id={'todoList'}>\n         {getVisibleTodos(state.todos, state.visibilityFilter).map(todo =>\n            <Todo\n               key={todo.id}\n               {...todo}\n            />\n         )}\n      </ul>\n   );\n};\nTodoList.contextTypes = {\n   store: PropTypes.object\n};\n\nconst getVisibleTodos = (todos, filter) => {\n   switch (filter) {\n      case 'SHOW_COMPLETED':\n         return todos.filter(\n            t => t.completed\n         );\n      case 'SHOW_ACTIVE':\n         return todos.filter(\n            t => !t.completed\n         );\n      default:\n         return todos;\n   }\n};\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}