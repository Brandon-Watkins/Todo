{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\"; //Reducer handling updating individual todo objects\n\nconst todo = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state; //Not the todo we're looking for.\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        completed: !state.completed\n      });\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the list containing all todo objects\n\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      if (action.text === '' || action.text === undefined) {\n        if (nextTodoId > 0) nextTodoId--;\n        return state;\n      }\n\n      return [...state, todo(undefined, action)];\n\n    case 'TOGGLE_TODO':\n      return state.map(t => todo(t, action));\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the visibility filter for the app\n\n\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n}; // Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\n\n\nconst combineReducers = Redux.combineReducers;\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});\nconst createStore = Redux.createStore;\nconst store = createStore(todoApp);\n/************************************* Render UI ******************************/\n\nconst handleKeyDown = (e, btn) => {\n  if (e.keyCode === 13) {\n    e.preventDefault();\n    btn.click();\n  }\n};\n\nconst Component = React.Component;\nlet ref;\nlet nextTodoId = 0;\n\nclass TodoApp extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: node => {\n        this.input = node;\n      },\n      onKeyDown: handleKeyDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      ref: buttonNode => {\n        this.buttonNode = buttonNode;\n      },\n      onClick: () => {\n        store.dispatch({\n          type: 'ADD_TODO',\n          text: this.input.value,\n          id: nextTodoId++\n        });\n        this.input.value = '';\n        this.input.focus();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"Add Todo\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, this.props.todos.map(todo => /*#__PURE__*/React.createElement(\"li\", {\n      key: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, todo.text))));\n  }\n\n}\n\n;\n\nconst render = () => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(TodoApp, {\n    todos: store.getState().todos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), document.getElementById('root'));\n}; // Render the application, in response to the current application state.\n// Calls render every time the store changes.\n\n\nstore.subscribe(render); // Call render once to render the initial state.\n\nrender();","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js"],"names":["React","ReactDOM","Redux","todo","state","action","type","id","text","completed","todos","undefined","nextTodoId","map","t","visibilityFilter","filter","combineReducers","todoApp","createStore","store","handleKeyDown","e","btn","keyCode","preventDefault","click","Component","ref","TodoApp","render","node","input","buttonNode","dispatch","value","focus","props","getState","document","getElementById","subscribe"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\n\n\n//Reducer handling updating individual todo objects\nconst todo = (state = {}, action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         return {\n            id: action.id,\n            text: action.text,\n            completed:false\n         };\n      case 'TOGGLE_TODO':\n         if (state.id !== action.id) {\n            return state;//Not the todo we're looking for.\n         }\n         return {\n            ...state,\n            completed: !state.completed\n         };\n      default:\n         return state;\n   }\n}\n\n// Reducer handling updating the list containing all todo objects\nconst todos = (state = [], action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         if (action.text === '' || action.text === undefined) {\n            if (nextTodoId > 0) nextTodoId--;\n            return state;\n         }\n         return [\n            ...state,\n            todo(undefined, action)\n         ];\n      case 'TOGGLE_TODO':\n         return state.map(t => todo(t, action));\n      default:\n         return state;\n   }\n};\n\n// Reducer handling updating the visibility filter for the app\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n   switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n         return action.filter;\n      default:\n         return state;\n   }\n};\n\n// Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\nconst { combineReducers } = Redux;\nconst todoApp = combineReducers({\n   todos,\n   visibilityFilter\n});\n\nconst { createStore } = Redux;\nconst store = createStore(todoApp);\n\n\n/************************************* Render UI ******************************/\n\nconst handleKeyDown = (e, btn) => {\n   if (e.keyCode === 13) {\n      e.preventDefault();\n      btn.click();\n   }\n}\n\nconst { Component } = React;\n\nlet ref \nlet nextTodoId = 0;\nclass TodoApp extends Component {\n   render() {\n      return (\n         <div>\n            <input ref={node => {\n               this.input = node;\n            }} onKeyDown={handleKeyDown} />\n            <button ref={buttonNode => {\n               this.buttonNode = buttonNode;\n            }} onClick={() => {\n               store.dispatch({\n                  type: 'ADD_TODO',\n                  text: this.input.value,\n                  id: nextTodoId++\n               });\n               this.input.value ='';\n               this.input.focus();\n            }}>\n               Add Todo\n            </button>\n            <ul>\n               {this.props.todos.map(todo =>\n                  <li key={todo.id}>\n                     {todo.text}\n                  </li>\n               )}\n            </ul>\n         </div>\n      )\n   }\n};\n\nconst render = () => {\n   ReactDOM.render(\n      <TodoApp\n         todos={store.getState().todos}\n      />, document.getElementById('root')\n   );\n};\n\n// Render the application, in response to the current application state.\n// Calls render every time the store changes.\nstore.subscribe(render);\n// Call render once to render the initial state.\nrender();\n"]},"metadata":{},"sourceType":"module"}