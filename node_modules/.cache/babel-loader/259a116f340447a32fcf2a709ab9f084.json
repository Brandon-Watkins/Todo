{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\nexport default function App() {\n  // To make todos easier to follow, and keep it from doing too many things.\n  // Responsible for creating and updating individual todo objects\n  const todo = (state, action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return {\n          id: action.id,\n          text: action.text,\n          completed: false\n        };\n      // This toggle's state refers to the state of the individual todo, not the list of todos\n\n      case 'TOGGLE_TODO':\n        if (state.id !== action.id) {\n          return state; //Not the todo we're looking for.\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          completed: !state.completed\n        });\n\n      default:\n        return state;\n    }\n  }; // Reducer function\n  // Responsible for updating the list of todos\n\n\n  const todos = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return [...state, todo(undefined, action)];\n\n      case 'TOGGLE_TODO':\n        return state.map(t => todo(t, action));\n      // Reducers must return the given state, for any unknown/unhandled situations.\n\n      default:\n        return state;\n    }\n  };\n\n  const visibilityFilter = (state = 'SHOW_ALL', action) => {};\n\n  const testAddTodo = () => {\n    const stateBefore = [];\n    const action = {\n      type: 'ADD_TODO',\n      id: 0,\n      text: 'Learn Redux'\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  const testToggleTodo = () => {\n    const stateBefore = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: false\n    }];\n    const action = {\n      type: 'TOGGLE_TODO',\n      id: 1\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: true\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  testAddTodo();\n  testToggleTodo();\n  console.log('All tests passed.');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 10\n    }\n  }, \"Hello World\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }\n  }, \"Do stuff.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }\n  }, \"And things.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 10\n    }\n  }, \"And more things.\"));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js"],"names":["React","ReactDOM","Redux","expect","deepFreeze","App","todo","state","action","type","id","text","completed","todos","undefined","map","t","visibilityFilter","testAddTodo","stateBefore","stateAfter","toEqual","testToggleTodo","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\n\nexport default function App() {\n\n   // To make todos easier to follow, and keep it from doing too many things.\n   // Responsible for creating and updating individual todo objects\n   const todo = (state, action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return {\n               id: action.id,\n               text: action.text,\n               completed:false\n            };\n         // This toggle's state refers to the state of the individual todo, not the list of todos\n         case 'TOGGLE_TODO':\n            if (state.id !== action.id) {\n               return state;//Not the todo we're looking for.\n            }\n            return {\n               ...state,\n               completed: !state.completed\n            };\n         default:\n            return state;\n      }\n   }\n\n   // Reducer function\n   // Responsible for updating the list of todos\n   const todos = (state = [], action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return [\n               ...state,\n               todo(undefined, action)\n            ];\n         case 'TOGGLE_TODO':\n            return state.map(t => todo(t, action));\n         // Reducers must return the given state, for any unknown/unhandled situations.\n         default:\n            return state;\n      }\n   };\n\n   const visibilityFilter = (state = 'SHOW_ALL', action) => {\n\n   }\n   \n\n\n   const testAddTodo = () => {\n      const stateBefore = [];\n      const action = {\n         type: 'ADD_TODO',\n         id: 0,\n         text: 'Learn Redux'\n      };\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n   };\n\n   const testToggleTodo = () => {\n      const stateBefore = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: false\n         }\n      ];\n\n      const action = {\n         type: 'TOGGLE_TODO',\n         id: 1\n      };\n\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: true\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n\n   };\n\n   testAddTodo();\n   testToggleTodo();\n   console.log('All tests passed.')\n\n   return (\n      <div className=\"App\">\n         <h1>Hello World</h1>\n         <h2>Do stuff.</h2>\n         <p>And things.</p>\n         <p>And more things.</p>\n      </div>\n   );\n\n}\n"]},"metadata":{},"sourceType":"module"}