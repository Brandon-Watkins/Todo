{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport { current } from \"@reduxjs/toolkit\";\n/************************************* Reducers ******************************/\n//Reducer handling updating individual todo objects\n\nconst todo = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state; //Not the todo we're looking for.\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        completed: !state.completed\n      });\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the list containing all todo objects\n\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, todo(undefined, action)];\n\n    case 'TOGGLE_TODO':\n      return state.map(t => todo(t, action));\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the visibility filter for the app\n\n\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n}; // Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\n\n\nconst combineReducers = Redux.combineReducers;\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});\nconst createStore = Redux.createStore;\nconst store = createStore(todoApp);\n/************************************* Event Handle ******************************/\n\nconst handleKeyDown = e => {\n  if (e.keyCode === 13) {\n    e.preventDefault();\n    if (btn.hasFocus) return;\n    btn.focus();\n  }\n};\n\nconst handleKeyUp = e => {\n  if (e.keyCode === 13) {\n    e.preventDefault();\n    btn.click();\n  }\n};\n\nconst handleButtonClick = e => {\n  if (inp.value === '' || inp.value === undefined) return inp.focus();\n  return store.dispatch({\n    type: 'ADD_TODO',\n    text: inp.value,\n    id: nextTodoId++\n  }), inp.value = '', inp.focus();\n};\n\nconst Component = React.Component;\n\nconst FilterLink = ({\n  filter,\n  currentFilter,\n  children\n}) => {\n  if (filter === currentFilter) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 14\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: e => {\n      e.preventDefault();\n      store.dispatch({\n        type: 'SET_VISIBILITY_FILTER',\n        filter\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, children);\n}; // He refers to this as a presentation component. Extracted for modularity.\n\n\nconst Todo = ({\n  onClick,\n  completed,\n  text\n}) => /*#__PURE__*/React.createElement(\"li\", {\n  onClick: onClick,\n  style: {\n    textDecoration: completed ? 'line-through' : 'none'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 4\n  }\n}, text); // Another presentation component.\n\n\nconst TodoList = ({\n  todos,\n  onTodoClick\n}) => /*#__PURE__*/React.createElement(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 4\n  }\n}, todos.map(todo => /*#__PURE__*/React.createElement(Todo, Object.assign({\n  key: todo.id\n}, todo, {\n  onClick: () => onTodoClick(todo.id),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 10\n  }\n}))));\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n  }\n};\n\nlet inp;\nlet btn;\nlet nextTodoId = 0;\n\nclass TodoApp extends Component {\n  render() {\n    const _this$props = this.props,\n          todos = _this$props.todos,\n          visibilityFilter = _this$props.visibilityFilter;\n    const visibleTodos = getVisibleTodos(todos, visibilityFilter);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: node => {\n        inp = node;\n      },\n      onKeyUp: handleKeyUp,\n      onKeyDown: handleKeyDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      ref: buttonNode => {\n        btn = buttonNode;\n      },\n      onClick: handleButtonClick,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, \"Add Todo\"), /*#__PURE__*/React.createElement(TodoList, {\n      todos: visibleTodos,\n      onTodoClick: id => store.dispatch({\n        type: 'TOGGLE_TODO',\n        id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, \"Show:\", ' ', /*#__PURE__*/React.createElement(FilterLink, {\n      filter: \"SHOW_ALL\",\n      currentFilter: visibilityFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 16\n      }\n    }, \"All\"), ' ', /*#__PURE__*/React.createElement(FilterLink, {\n      filter: \"SHOW_ACTIVE\",\n      currentFilter: visibilityFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 16\n      }\n    }, \"Active\"), ' ', /*#__PURE__*/React.createElement(FilterLink, {\n      filter: \"SHOW_COMPLETED\",\n      currentFilter: visibilityFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 16\n      }\n    }, \"Completed\")));\n  }\n\n}\n\n;\n\nconst render = () => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(TodoApp, Object.assign({}, store.getState(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  })), document.getElementById('root'));\n}; // Render the application, in response to the current application state.\n// Calls render every time the store changes.\n\n\nstore.subscribe(render); // Call render once to render the initial state.\n\nrender();","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js"],"names":["React","ReactDOM","Redux","current","todo","state","action","type","id","text","completed","todos","undefined","map","t","visibilityFilter","filter","combineReducers","todoApp","createStore","store","handleKeyDown","e","keyCode","preventDefault","btn","hasFocus","focus","handleKeyUp","click","handleButtonClick","inp","value","dispatch","nextTodoId","Component","FilterLink","currentFilter","children","Todo","onClick","textDecoration","TodoList","onTodoClick","getVisibleTodos","TodoApp","render","props","visibleTodos","node","buttonNode","getState","document","getElementById","subscribe"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport {current} from \"@reduxjs/toolkit\";\n\n/************************************* Reducers ******************************/\n\n\n//Reducer handling updating individual todo objects\nconst todo = (state = {}, action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         return {\n            id: action.id,\n            text: action.text,\n            completed:false\n         };\n      case 'TOGGLE_TODO':\n         if (state.id !== action.id) {\n            return state;//Not the todo we're looking for.\n         }\n         return {\n            ...state,\n            completed: !state.completed\n         };\n      default:\n         return state;\n   }\n}\n\n// Reducer handling updating the list containing all todo objects\nconst todos = (state = [], action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         return [\n            ...state,\n            todo(undefined, action)\n         ];\n      case 'TOGGLE_TODO':\n         return state.map(t => todo(t, action));\n      default:\n         return state;\n   }\n};\n\n// Reducer handling updating the visibility filter for the app\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n   switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n         return action.filter;\n      default:\n         return state;\n   }\n};\n\n// Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\nconst { combineReducers } = Redux;\nconst todoApp = combineReducers({\n   todos,\n   visibilityFilter\n});\n\nconst { createStore } = Redux;\nconst store = createStore(todoApp);\n\n\n/************************************* Event Handle ******************************/\n\nconst handleKeyDown = (e) => {\n   if (e.keyCode === 13) {\n      e.preventDefault();\n      if (btn.hasFocus) return;\n      btn.focus();\n   }\n}\n\nconst handleKeyUp = (e) => {\n   if (e.keyCode === 13) {\n      e.preventDefault();\n      btn.click();\n   }\n};\n\nconst handleButtonClick = (e) => {\n   if (inp.value === '' || inp.value === undefined) return inp.focus();\n   return (\n      store.dispatch({\n         type: 'ADD_TODO',\n         text: inp.value,\n         id: nextTodoId++\n      }),\n      inp.value ='',\n      inp.focus()\n   );\n};\n\nconst { Component } = React;\n\nconst FilterLink = ({\n   filter,\n   currentFilter,\n   children\n}) => {\n   if (filter === currentFilter) {\n      return <span>{children}</span>;\n   }\n   return (\n      <a\n         href='#'\n         onClick={e => {\n            e.preventDefault();\n            store.dispatch({\n               type: 'SET_VISIBILITY_FILTER',\n               filter\n            });\n         }}\n      >\n         {children}\n      </a>\n   );\n};\n\n// He refers to this as a presentation component. Extracted for modularity.\nconst Todo = ({\n   onClick,\n   completed,\n   text\n}) => (\n   <li\n      onClick={onClick}\n      style={{\n         textDecoration: completed? 'line-through' : 'none'\n      }}\n   >\n      {text}\n   </li>\n);\n\n// Another presentation component.\nconst TodoList = ({\n   todos,\n   onTodoClick\n}) => (\n   <ul>\n      {todos.map(todo =>\n         <Todo\n            key={todo.id}\n            {...todo}\n            onClick={() => onTodoClick(todo.id)}\n         />\n      )}\n   </ul>\n);\n\nconst getVisibleTodos = (\n   todos,\n   filter\n) => {\n   switch (filter) {\n      case 'SHOW_ALL':\n         return todos;\n      case 'SHOW_COMPLETED':\n         return todos.filter(\n            t => t.completed\n         );\n      case 'SHOW_ACTIVE':\n         return todos.filter(\n            t => !t.completed\n         );\n   }\n};\n\nlet inp;\nlet btn;\nlet nextTodoId = 0;\nclass TodoApp extends Component {\n   render() {\n      const {\n         todos,\n         visibilityFilter\n      } = this.props;\n      const visibleTodos = getVisibleTodos(\n         todos,\n         visibilityFilter\n      );\n      return (\n         <div>\n            <input\n               ref={node => {\n                  inp = node;\n               }}\n               onKeyUp={handleKeyUp}\n               onKeyDown={handleKeyDown}\n            />\n            <button\n               ref={buttonNode => {\n                  btn = buttonNode;\n               }}\n               onClick={handleButtonClick}\n               onKeyDown={handleKeyDown}\n               onKeyUp={handleKeyUp}\n            >\n               Add Todo\n            </button>\n            <TodoList\n               todos={visibleTodos}\n               onTodoClick={id =>\n                  store.dispatch({\n                     type: 'TOGGLE_TODO',\n                     id\n                  })\n               }\n            />\n            <p>\n               Show:\n               {' '}\n               <FilterLink\n                  filter='SHOW_ALL'\n                  currentFilter={visibilityFilter}\n               >\n                  All\n               </FilterLink>\n               {' '}\n               <FilterLink\n                  filter='SHOW_ACTIVE'\n                  currentFilter={visibilityFilter}\n               >\n                  Active\n               </FilterLink>\n               {' '}\n               <FilterLink\n                  filter='SHOW_COMPLETED'\n                  currentFilter={visibilityFilter}\n               >\n                  Completed\n               </FilterLink>\n            </p>\n         </div>\n      )\n   }\n};\n\nconst render = () => {\n   ReactDOM.render(\n      <TodoApp\n         {...store.getState()}\n      />, document.getElementById('root')\n   );\n};\n\n// Render the application, in response to the current application state.\n// Calls render every time the store changes.\nstore.subscribe(render);\n// Call render once to render the initial state.\nrender();\n"]},"metadata":{},"sourceType":"module"}