{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.emptyObject = emptyObject;\nexports.isOneline = exports.isError = exports.partition = exports.sparseArrayEquality = exports.typeEquality = exports.subsetEquality = exports.iterableEquality = exports.getObjectSubset = exports.getPath = exports.hasOwnProperty = void 0;\n\nvar _jestGetType = require('jest-get-type');\n\nvar _jasmineUtils = require('./jasmineUtils');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol; // Return whether object instance inherits getter from its class.\n\nconst hasGetterFromConstructor = (object, key) => {\n  const constructor = object.constructor;\n\n  if (constructor === Object) {\n    // A literal object has Object as constructor.\n    // Therefore, it cannot inherit application-specific getters.\n    // Furthermore, Object has __proto__ getter which is not relevant.\n    // Array, Boolean, Number, String constructors donâ€™t have any getters.\n    return false;\n  }\n\n  if (typeof constructor !== 'function') {\n    // Object.create(null) constructs object with no constructor nor prototype.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Custom_and_Null_objects\n    return false;\n  }\n\n  const descriptor = Object.getOwnPropertyDescriptor(constructor.prototype, key);\n  return descriptor !== undefined && typeof descriptor.get === 'function';\n};\n\nconst hasOwnProperty = (object, key) => Object.prototype.hasOwnProperty.call(object, key) || hasGetterFromConstructor(object, key);\n\nexports.hasOwnProperty = hasOwnProperty;\n\nconst getPath = (object, propertyPath) => {\n  if (!Array.isArray(propertyPath)) {\n    propertyPath = propertyPath.split('.');\n  }\n\n  if (propertyPath.length) {\n    const lastProp = propertyPath.length === 1;\n    const prop = propertyPath[0];\n    const newObject = object[prop];\n\n    if (!lastProp && (newObject === null || newObject === undefined)) {\n      // This is not the last prop in the chain. If we keep recursing it will\n      // hit a `can't access property X of undefined | null`. At this point we\n      // know that the chain has broken and we can return right away.\n      return {\n        hasEndProp: false,\n        lastTraversedObject: object,\n        traversedPath: []\n      };\n    }\n\n    const result = getPath(newObject, propertyPath.slice(1));\n\n    if (result.lastTraversedObject === null) {\n      result.lastTraversedObject = object;\n    }\n\n    result.traversedPath.unshift(prop);\n\n    if (lastProp) {\n      // Does object have the property with an undefined value?\n      // Although primitive values support bracket notation (above)\n      // they would throw TypeError for in operator (below).\n      result.hasEndProp = newObject !== undefined || !(0, _jestGetType.isPrimitive)(object) && prop in object;\n\n      if (!result.hasEndProp) {\n        result.traversedPath.shift();\n      }\n    }\n\n    return result;\n  }\n\n  return {\n    lastTraversedObject: null,\n    traversedPath: [],\n    value: object\n  };\n}; // Strip properties from object that are not present in the subset. Useful for\n// printing the diff for toMatchObject() without adding unrelated noise.\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nexports.getPath = getPath;\n\nconst getObjectSubset = (object, subset, seenReferences = new WeakMap()) => {\n  if (Array.isArray(object)) {\n    if (Array.isArray(subset) && subset.length === object.length) {\n      // The map method returns correct subclass of subset.\n      return subset.map((sub, i) => getObjectSubset(object[i], sub));\n    }\n  } else if (object instanceof Date) {\n    return object;\n  } else if (isObject(object) && isObject(subset)) {\n    if ((0, _jasmineUtils.equals)(object, subset, [iterableEquality, subsetEquality])) {\n      // Avoid unnecessary copy which might return Object instead of subclass.\n      return subset;\n    }\n\n    const trimmed = {};\n    seenReferences.set(object, trimmed);\n    Object.keys(object).filter(key => hasOwnProperty(subset, key)).forEach(key => {\n      trimmed[key] = seenReferences.has(object[key]) ? seenReferences.get(object[key]) : getObjectSubset(object[key], subset[key], seenReferences);\n    });\n\n    if (Object.keys(trimmed).length > 0) {\n      return trimmed;\n    }\n  }\n\n  return object;\n};\n\nexports.getObjectSubset = getObjectSubset;\nconst IteratorSymbol = Symbol.iterator;\n\nconst hasIterator = object => !!(object != null && object[IteratorSymbol]); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nconst iterableEquality = (a, b, aStack = [], bStack = []) => {\n  if (typeof a !== 'object' || typeof b !== 'object' || Array.isArray(a) || Array.isArray(b) || !hasIterator(a) || !hasIterator(b)) {\n    return undefined;\n  }\n\n  if (a.constructor !== b.constructor) {\n    return false;\n  }\n\n  let length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    // circular references at same depth are equal\n    // circular reference is not equal to non-circular one\n    if (aStack[length] === a) {\n      return bStack[length] === b;\n    }\n  }\n\n  aStack.push(a);\n  bStack.push(b);\n\n  const iterableEqualityWithStack = (a, b) => iterableEquality(a, b, [...aStack], [...bStack]);\n\n  if (a.size !== undefined) {\n    if (a.size !== b.size) {\n      return false;\n    } else if ((0, _jasmineUtils.isA)('Set', a) || (0, _jasmineUtils.isImmutableUnorderedSet)(a)) {\n      let allFound = true;\n\n      var _iterator = _createForOfIteratorHelper(a),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          const aValue = _step.value;\n\n          if (!b.has(aValue)) {\n            let has = false;\n\n            var _iterator2 = _createForOfIteratorHelper(b),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                const bValue = _step2.value;\n                const isEqual = (0, _jasmineUtils.equals)(aValue, bValue, [iterableEqualityWithStack]);\n\n                if (isEqual === true) {\n                  has = true;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            if (has === false) {\n              allFound = false;\n              break;\n            }\n          }\n        } // Remove the first value from the stack of traversed values.\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      aStack.pop();\n      bStack.pop();\n      return allFound;\n    } else if ((0, _jasmineUtils.isA)('Map', a) || (0, _jasmineUtils.isImmutableUnorderedKeyed)(a)) {\n      let allFound = true;\n\n      var _iterator3 = _createForOfIteratorHelper(a),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          const aEntry = _step3.value;\n\n          if (!b.has(aEntry[0]) || !(0, _jasmineUtils.equals)(aEntry[1], b.get(aEntry[0]), [iterableEqualityWithStack])) {\n            let has = false;\n\n            var _iterator4 = _createForOfIteratorHelper(b),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                const bEntry = _step4.value;\n                const matchedKey = (0, _jasmineUtils.equals)(aEntry[0], bEntry[0], [iterableEqualityWithStack]);\n                let matchedValue = false;\n\n                if (matchedKey === true) {\n                  matchedValue = (0, _jasmineUtils.equals)(aEntry[1], bEntry[1], [iterableEqualityWithStack]);\n                }\n\n                if (matchedValue === true) {\n                  has = true;\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            if (has === false) {\n              allFound = false;\n              break;\n            }\n          }\n        } // Remove the first value from the stack of traversed values.\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      aStack.pop();\n      bStack.pop();\n      return allFound;\n    }\n  }\n\n  const bIterator = b[IteratorSymbol]();\n\n  var _iterator5 = _createForOfIteratorHelper(a),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      const aValue = _step5.value;\n      const nextB = bIterator.next();\n\n      if (nextB.done || !(0, _jasmineUtils.equals)(aValue, nextB.value, [iterableEqualityWithStack])) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  if (!bIterator.next().done) {\n    return false;\n  } // Remove the first value from the stack of traversed values.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n};\n\nexports.iterableEquality = iterableEquality;\n\nconst isObject = a => a !== null && typeof a === 'object';\n\nconst isObjectWithKeys = a => isObject(a) && !(a instanceof Error) && !(a instanceof Array) && !(a instanceof Date); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nconst subsetEquality = (object, subset) => {\n  // subsetEquality needs to keep track of the references\n  // it has already visited to avoid infinite loops in case\n  // there are circular references in the subset passed to it.\n  const subsetEqualityWithContext = (seenReferences = new WeakMap()) => (object, subset) => {\n    if (!isObjectWithKeys(subset)) {\n      return undefined;\n    }\n\n    return Object.keys(subset).every(key => {\n      if (isObjectWithKeys(subset[key])) {\n        if (seenReferences.has(subset[key])) {\n          return (0, _jasmineUtils.equals)(object[key], subset[key], [iterableEquality]);\n        }\n\n        seenReferences.set(subset[key], true);\n      }\n\n      const result = object != null && hasOwnProperty(object, key) && (0, _jasmineUtils.equals)(object[key], subset[key], [iterableEquality, subsetEqualityWithContext(seenReferences)]); // The main goal of using seenReference is to avoid circular node on tree.\n      // It will only happen within a parent and its child, not a node and nodes next to it (same level)\n      // We should keep the reference for a parent and its child only\n      // Thus we should delete the reference immediately so that it doesn't interfere\n      // other nodes within the same level on tree.\n\n      seenReferences.delete(subset[key]);\n      return result;\n    });\n  };\n\n  return subsetEqualityWithContext()(object, subset);\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nexports.subsetEquality = subsetEquality;\n\nconst typeEquality = (a, b) => {\n  if (a == null || b == null || a.constructor === b.constructor) {\n    return undefined;\n  }\n\n  return false;\n};\n\nexports.typeEquality = typeEquality;\n\nconst sparseArrayEquality = (a, b) => {\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    return undefined;\n  } // A sparse array [, , 1] will have keys [\"2\"] whereas [undefined, undefined, 1] will have keys [\"0\", \"1\", \"2\"]\n\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  return (0, _jasmineUtils.equals)(a, b, [iterableEquality, typeEquality], true) && (0, _jasmineUtils.equals)(aKeys, bKeys);\n};\n\nexports.sparseArrayEquality = sparseArrayEquality;\n\nconst partition = (items, predicate) => {\n  const result = [[], []];\n  items.forEach(item => result[predicate(item) ? 0 : 1].push(item));\n  return result;\n}; // Copied from https://github.com/graingert/angular.js/blob/a43574052e9775cbc1d7dd8a086752c979b0f020/src/Angular.js#L685-L693\n\n\nexports.partition = partition;\n\nconst isError = value => {\n  switch (Object.prototype.toString.call(value)) {\n    case '[object Error]':\n      return true;\n\n    case '[object Exception]':\n      return true;\n\n    case '[object DOMException]':\n      return true;\n\n    default:\n      return value instanceof Error;\n  }\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nexports.isError = isError;\n\nfunction emptyObject(obj) {\n  return obj && typeof obj === 'object' ? !Object.keys(obj).length : false;\n}\n\nconst MULTILINE_REGEXP = /[\\r\\n]/;\n\nconst isOneline = (expected, received) => typeof expected === 'string' && typeof received === 'string' && (!MULTILINE_REGEXP.test(expected) || !MULTILINE_REGEXP.test(received));\n\nexports.isOneline = isOneline;","map":null,"metadata":{},"sourceType":"script"}