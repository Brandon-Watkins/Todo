{"ast":null,"code":"var _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nexport default function App() {\n  const counter = (state = 0, action) => {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      default:\n        return state;\n    }\n  };\n\n  {\n    /* Creating my own createStore method below, to understand it. It is mostly the same as the\n      one that ships with Redux.\n      const { createStore } = Redux;\n    */\n  }\n\n  const createStore = reducer => {\n    let listeners = [];\n    let state;\n\n    const getState = () => state;\n\n    const dispatch = action => {\n      state = reducer(state, action);\n      listeners.forEach(listener => listener());\n    };\n\n    const subscribe = listener => {\n      listeners.push(listener);\n      return () => {\n        listeners = listeners.filter(l => l !== listener);\n      };\n    };\n\n    {\n      /*\n        this returns a function, that can remove. it doesn't run said function. ie.\n        const remove = subscribe(myListener);\n        // later:\n        remove();\n      */\n    }\n    {\n      /* dispatch a dummy state, just to get the reducer to return an initial value. */\n    }\n    dispatch({});\n    return {\n      getState,\n      dispatch,\n      subscribe\n    };\n  };\n\n  const store = createStore(counter);\n\n  const render = () => {\n    ReactDOM.render( /*#__PURE__*/React.createElement(Counter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 10\n      }\n    }), document.getElementById('root'));\n  };\n\n  store.subscribe(render);\n  render();\n  {\n    /* Counter tests\n    expect(\n      counter(0, {type: 'INCREMENT'})\n    ).toEqual(1);\n    expect(\n      counter(1, {type: 'INCREMENT'})\n    ).toEqual(2);\n    expect(\n      counter(2, {type: 'DECREMENT'})\n    ).toEqual(1);\n    expect(\n      counter(1, {type: 'DECREMENT'})\n    ).toEqual(0);\n    expect(\n      counter(1, {type: 'SOMETHING_ELSE'})\n    ).toEqual(1);\n    expect(\n      counter(undefined, {})\n    ).toEqual(0);\n    */\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Hello World\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Do stuff.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 8\n    }\n  }, \"And things.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 8\n    }\n  }, \"And more things.\"));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js"],"names":["React","Redux","expect","App","counter","state","action","type","createStore","reducer","listeners","getState","dispatch","forEach","listener","subscribe","push","filter","l","store","render","ReactDOM","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,GAAT,GAAe;AAE3B,QAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,WAAL;AACG,eAAOF,KAAK,GAAG,CAAf;;AACH,WAAK,WAAL;AACG,eAAOA,KAAK,GAAG,CAAf;;AACH;AACG,eAAOA,KAAP;AANN;AAQF,GATD;;AAWA;AAAC;;;;AAGE;;AAEH,QAAMG,WAAW,GAAIC,OAAD,IAAa;AAC9B,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIL,KAAJ;;AACA,UAAMM,QAAQ,GAAG,MAAMN,KAAvB;;AAEA,UAAMO,QAAQ,GAAIN,MAAD,IAAY;AAC1BD,MAAAA,KAAK,GAAGI,OAAO,CAACJ,KAAD,EAAQC,MAAR,CAAf;AACAI,MAAAA,SAAS,CAACG,OAAV,CAAkBC,QAAQ,IAAIA,QAAQ,EAAtC;AACF,KAHD;;AAKA,UAAMC,SAAS,GAAID,QAAD,IAAc;AAC7BJ,MAAAA,SAAS,CAACM,IAAV,CAAeF,QAAf;AACA,aAAO,MAAM;AACVJ,QAAAA,SAAS,GAAGA,SAAS,CAACO,MAAV,CAAiBC,CAAC,IAAIA,CAAC,KAAKJ,QAA5B,CAAZ;AACF,OAFD;AAGF,KALD;;AAMA;AAAC;;;;;;AAKE;AAEH;AAAC;AAAkF;AACnFF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEA,WAAO;AAAED,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBG,MAAAA;AAAtB,KAAP;AACF,GA3BD;;AA6BA,QAAMI,KAAK,GAAGX,WAAW,CAACJ,OAAD,CAAzB;;AAEA,QAAMgB,MAAM,GAAG,MAAM;AAClBC,IAAAA,QAAQ,CAACD,MAAT,eACG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEGE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFH;AAIF,GALD;;AAOAJ,EAAAA,KAAK,CAACJ,SAAN,CAAgBK,MAAhB;AACAA,EAAAA,MAAM;AAMN;AAAC;;;;;;;;;;;;;;;;;;;;AAwBE;AAEH,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHH,eAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJH,CADD;AAQF","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\n\nexport default function App() {\n\n   const counter = (state = 0, action) => {\n      switch (action.type) {\n         case 'INCREMENT':\n            return state + 1;\n         case 'DECREMENT':\n            return state - 1;\n         default:\n            return state;\n      }\n   }\n\n   {/* Creating my own createStore method below, to understand it. It is mostly the same as the\n      one that ships with Redux.\n      const { createStore } = Redux;\n   */}\n\n   const createStore = (reducer) => {\n      let listeners = [];\n      let state;\n      const getState = () => state;\n\n      const dispatch = (action) => {\n         state = reducer(state, action);\n         listeners.forEach(listener => listener());\n      };\n\n      const subscribe = (listener) => {\n         listeners.push(listener);\n         return () => {\n            listeners = listeners.filter(l => l !== listener);\n         };\n      };\n      {/*\n         this returns a function, that can remove. it doesn't run said function. ie.\n         const remove = subscribe(myListener);\n         // later:\n         remove();\n      */}\n\n      {/* dispatch a dummy state, just to get the reducer to return an initial value. */}\n      dispatch({});\n\n      return { getState, dispatch, subscribe };\n   };\n\n   const store = createStore(counter);\n\n   const render = () => {\n      ReactDOM.render(\n         <Counter />,\n         document.getElementById('root')\n      )\n   };\n\n   store.subscribe(render);\n   render();\n\n\n\n\n\n   {/* Counter tests\n   expect(\n      counter(0, {type: 'INCREMENT'})\n   ).toEqual(1);\n\n   expect(\n      counter(1, {type: 'INCREMENT'})\n   ).toEqual(2);\n\n   expect(\n      counter(2, {type: 'DECREMENT'})\n   ).toEqual(1);\n\n   expect(\n      counter(1, {type: 'DECREMENT'})\n   ).toEqual(0);\n\n   expect(\n      counter(1, {type: 'SOMETHING_ELSE'})\n   ).toEqual(1);\n\n   expect(\n      counter(undefined, {})\n   ).toEqual(0);\n   */}\n\n   return (\n    <div className=\"App\">\n      <h1>Hello World</h1>\n      <h2>Do stuff.</h2>\n       <p>And things.</p>\n       <p>And more things.</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}