{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|{[a-f\\d]{1,6}})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\nconst ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\n\nfunction unescape(c) {\n  const u = c[0] === 'u';\n  const bracket = c[1] === '{';\n\n  if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {\n    return String.fromCharCode(parseInt(c.slice(1), 16));\n  }\n\n  if (u && bracket) {\n    return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n  }\n\n  return ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n  const results = [];\n  const chunks = arguments_.trim().split(/\\s*,\\s*/g);\n  let matches;\n\n  var _iterator = _createForOfIteratorHelper(chunks),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const chunk = _step.value;\n      const number = Number(chunk);\n\n      if (!Number.isNaN(number)) {\n        results.push(number);\n      } else if (matches = chunk.match(STRING_REGEX)) {\n        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n      } else {\n        throw new Error(\"Invalid Chalk template style argument: \".concat(chunk, \" (in style '\").concat(name, \"')\"));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return results;\n}\n\nfunction parseStyle(style) {\n  STYLE_REGEX.lastIndex = 0;\n  const results = [];\n  let matches;\n\n  while ((matches = STYLE_REGEX.exec(style)) !== null) {\n    const name = matches[1];\n\n    if (matches[2]) {\n      const args = parseArguments(name, matches[2]);\n      results.push([name].concat(args));\n    } else {\n      results.push([name]);\n    }\n  }\n\n  return results;\n}\n\nfunction buildStyle(chalk, styles) {\n  const enabled = {};\n\n  var _iterator2 = _createForOfIteratorHelper(styles),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      const layer = _step2.value;\n\n      var _iterator3 = _createForOfIteratorHelper(layer.styles),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          const style = _step3.value;\n          enabled[style[0]] = layer.inverse ? null : style.slice(1);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  let current = chalk;\n\n  for (var _i = 0, _Object$entries = Object.entries(enabled); _i < _Object$entries.length; _i++) {\n    const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          styleName = _Object$entries$_i[0],\n          styles = _Object$entries$_i[1];\n\n    if (!Array.isArray(styles)) {\n      continue;\n    }\n\n    if (!(styleName in current)) {\n      throw new Error(\"Unknown Chalk style: \".concat(styleName));\n    }\n\n    current = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n  }\n\n  return current;\n}\n\nmodule.exports = (chalk, temporary) => {\n  const styles = [];\n  const chunks = [];\n  let chunk = []; // eslint-disable-next-line max-params\n\n  temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n    if (escapeCharacter) {\n      chunk.push(unescape(escapeCharacter));\n    } else if (style) {\n      const string = chunk.join('');\n      chunk = [];\n      chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n      styles.push({\n        inverse,\n        styles: parseStyle(style)\n      });\n    } else if (close) {\n      if (styles.length === 0) {\n        throw new Error('Found extraneous } in Chalk template literal');\n      }\n\n      chunks.push(buildStyle(chalk, styles)(chunk.join('')));\n      chunk = [];\n      styles.pop();\n    } else {\n      chunk.push(character);\n    }\n  });\n  chunks.push(chunk.join(''));\n\n  if (styles.length > 0) {\n    const errMessage = \"Chalk template literal is missing \".concat(styles.length, \" closing bracket\").concat(styles.length === 1 ? '' : 's', \" (`}`)\");\n    throw new Error(errMessage);\n  }\n\n  return chunks.join('');\n};","map":null,"metadata":{},"sourceType":"script"}