{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\"; //Reducer handling updating individual todo objects\n\nconst todo = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      if (action.text === '' || action.text == undefined) return undefined;\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state; //Not the todo we're looking for.\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        completed: !state.completed\n      });\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the list containing all todo objects\n\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, todo(undefined, action)];\n\n    case 'TOGGLE_TODO':\n      return state.map(t => todo(t, action));\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the visibility filter for the app\n\n\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n}; // Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\n\n\nconst combineReducers = Redux.combineReducers;\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter\n});\nconst createStore = Redux.createStore;\nconst store = createStore(todoApp);\n/************************************* Render UI ******************************/\n\nconst Component = React.Component;\nlet nextTodoId = 0;\n\nclass TodoApp extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: node => {\n        this.input = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        store.dispatch({\n          type: 'ADD_TODO',\n          text: this.input.value,\n          id: nextTodoId++\n        });\n        this.input.value = '';\n        this.input.focus();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"Add Todo\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, this.props.todos.map(todo => /*#__PURE__*/React.createElement(\"li\", {\n      key: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, todo.text))));\n  }\n\n}\n\n;\n\nconst render = () => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(TodoApp, {\n    todos: store.getState().todos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), document.getElementById('root'));\n}; // Render the application, in response to the current application state.\n// Calls render every time the store changes.\n\n\nstore.subscribe(render); // Call render once to render the initial state.\n\nrender();","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/index.js"],"names":["React","ReactDOM","Redux","todo","state","action","type","text","undefined","id","completed","todos","map","t","visibilityFilter","filter","combineReducers","todoApp","createStore","store","Component","nextTodoId","TodoApp","render","node","input","dispatch","value","focus","props","getState","document","getElementById","subscribe"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB,C,CAGA;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAClC,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,UAAL;AACG,UAAID,MAAM,CAACE,IAAP,KAAgB,EAAhB,IAAsBF,MAAM,CAACE,IAAP,IAAeC,SAAzC,EAAoD,OAAOA,SAAP;AACpD,aAAO;AACJC,QAAAA,EAAE,EAAEJ,MAAM,CAACI,EADP;AAEJF,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAFT;AAGJG,QAAAA,SAAS,EAAC;AAHN,OAAP;;AAKH,SAAK,aAAL;AACG,UAAIN,KAAK,CAACK,EAAN,KAAaJ,MAAM,CAACI,EAAxB,EAA4B;AACzB,eAAOL,KAAP,CADyB,CACZ;AACf;;AACD,6CACMA,KADN;AAEGM,QAAAA,SAAS,EAAE,CAACN,KAAK,CAACM;AAFrB;;AAIH;AACG,aAAON,KAAP;AAjBN;AAmBF,CApBD,C,CAsBA;;;AACA,MAAMO,KAAK,GAAG,CAACP,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,UAAL;AACG,aAAO,CACJ,GAAGF,KADC,EAEJD,IAAI,CAACK,SAAD,EAAYH,MAAZ,CAFA,CAAP;;AAIH,SAAK,aAAL;AACG,aAAOD,KAAK,CAACQ,GAAN,CAAUC,CAAC,IAAIV,IAAI,CAACU,CAAD,EAAIR,MAAJ,CAAnB,CAAP;;AACH;AACG,aAAOD,KAAP;AATN;AAWF,CAZD,C,CAcA;;;AACA,MAAMU,gBAAgB,GAAG,CAACV,KAAK,GAAG,UAAT,EAAqBC,MAArB,KAAgC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,uBAAL;AACG,aAAOD,MAAM,CAACU,MAAd;;AACH;AACG,aAAOX,KAAP;AAJN;AAMF,CAPD,C,CASA;AACA;;;MACQY,e,GAAoBd,K,CAApBc,e;AACR,MAAMC,OAAO,GAAGD,eAAe,CAAC;AAC7BL,EAAAA,KAD6B;AAE7BG,EAAAA;AAF6B,CAAD,CAA/B;MAKQI,W,GAAgBhB,K,CAAhBgB,W;AACR,MAAMC,KAAK,GAAGD,WAAW,CAACD,OAAD,CAAzB;AAGA;;MAEQG,S,GAAcpB,K,CAAdoB,S;AAER,IAAIC,UAAU,GAAG,CAAjB;;AACA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC7BG,EAAAA,MAAM,GAAG;AACN,wBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAO,MAAA,GAAG,EAAEC,IAAI,IAAI;AACjB,aAAKC,KAAL,GAAaD,IAAb;AACF,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,eAIG;AAAQ,MAAA,OAAO,EAAE,MAAM;AACpBL,QAAAA,KAAK,CAACO,QAAN,CAAe;AACZpB,UAAAA,IAAI,EAAE,UADM;AAEZC,UAAAA,IAAI,EAAE,KAAKkB,KAAL,CAAWE,KAFL;AAGZlB,UAAAA,EAAE,EAAEY,UAAU;AAHF,SAAf;AAKA,aAAKI,KAAL,CAAWE,KAAX,GAAkB,EAAlB;AACA,aAAKF,KAAL,CAAWG,KAAX;AACF,OARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJH,eAeG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKC,KAAL,CAAWlB,KAAX,CAAiBC,GAAjB,CAAqBT,IAAI,iBACvB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACM,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIN,IAAI,CAACI,IADT,CADF,CADJ,CAfH,CADH;AAyBF;;AA3B4B;;AA4B/B;;AAED,MAAMgB,MAAM,GAAG,MAAM;AAClBtB,EAAAA,QAAQ,CAACsB,MAAT,eACG,oBAAC,OAAD;AACG,IAAA,KAAK,EAAEJ,KAAK,CAACW,QAAN,GAAiBnB,KAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAGOoB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHP;AAKF,CAND,C,CAQA;AACA;;;AACAb,KAAK,CAACc,SAAN,CAAgBV,MAAhB,E,CACA;;AACAA,MAAM","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\n\n\n//Reducer handling updating individual todo objects\nconst todo = (state = {}, action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         if (action.text === '' || action.text == undefined) return undefined;\n         return {\n            id: action.id,\n            text: action.text,\n            completed:false\n         };\n      case 'TOGGLE_TODO':\n         if (state.id !== action.id) {\n            return state;//Not the todo we're looking for.\n         }\n         return {\n            ...state,\n            completed: !state.completed\n         };\n      default:\n         return state;\n   }\n}\n\n// Reducer handling updating the list containing all todo objects\nconst todos = (state = [], action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         return [\n            ...state,\n            todo(undefined, action)\n         ];\n      case 'TOGGLE_TODO':\n         return state.map(t => todo(t, action));\n      default:\n         return state;\n   }\n};\n\n// Reducer handling updating the visibility filter for the app\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n   switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n         return action.filter;\n      default:\n         return state;\n   }\n};\n\n// Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\nconst { combineReducers } = Redux;\nconst todoApp = combineReducers({\n   todos,\n   visibilityFilter\n});\n\nconst { createStore } = Redux;\nconst store = createStore(todoApp);\n\n\n/************************************* Render UI ******************************/\n\nconst { Component } = React;\n\nlet nextTodoId = 0;\nclass TodoApp extends Component {\n   render() {\n      return (\n         <div>\n            <input ref={node => {\n               this.input = node;\n            }} />\n            <button onClick={() => {\n               store.dispatch({\n                  type: 'ADD_TODO',\n                  text: this.input.value,\n                  id: nextTodoId++\n               });\n               this.input.value ='';\n               this.input.focus();\n            }}>\n               Add Todo\n            </button>\n            <ul>\n               {this.props.todos.map(todo =>\n                  <li key={todo.id}>\n                     {todo.text}\n                  </li>\n               )}\n            </ul>\n         </div>\n      )\n   }\n};\n\nconst render = () => {\n   ReactDOM.render(\n      <TodoApp\n         todos={store.getState().todos}\n      />, document.getElementById('root')\n   );\n};\n\n// Render the application, in response to the current application state.\n// Calls render every time the store changes.\nstore.subscribe(render);\n// Call render once to render the initial state.\nrender();\n"]},"metadata":{},"sourceType":"module"}