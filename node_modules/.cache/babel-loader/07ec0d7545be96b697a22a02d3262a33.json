{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst ansiStyles = require('ansi-styles');\n\nconst _require = require('supports-color'),\n      stdoutColor = _require.stdout,\n      stderrColor = _require.stderr;\n\nconst _require2 = require('./util'),\n      stringReplaceAll = _require2.stringReplaceAll,\n      stringEncaseCRLFWithFirstIndex = _require2.stringEncaseCRLFWithFirstIndex;\n\nconst isArray = Array.isArray; // `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\n\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n    throw new Error('The `level` option should be an integer from 0 to 3');\n  } // Detect level if not set manually\n\n\n  const colorLevel = stdoutColor ? stdoutColor.level : 0;\n  object.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n  constructor(options) {\n    // eslint-disable-next-line no-constructor-return\n    return chalkFactory(options);\n  }\n\n}\n\nconst chalkFactory = options => {\n  const chalk = {};\n  applyOptions(chalk, options);\n\n  chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n  Object.setPrototypeOf(chalk, Chalk.prototype);\n  Object.setPrototypeOf(chalk.template, chalk);\n\n  chalk.template.constructor = () => {\n    throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n  };\n\n  chalk.template.Instance = ChalkClass;\n  return chalk.template;\n};\n\nfunction Chalk(options) {\n  return chalkFactory(options);\n}\n\nfor (var _i = 0, _Object$entries = Object.entries(ansiStyles); _i < _Object$entries.length; _i++) {\n  const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        styleName = _Object$entries$_i[0],\n        style = _Object$entries$_i[1];\n\n  styles[styleName] = {\n    get() {\n      const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n      Object.defineProperty(this, styleName, {\n        value: builder\n      });\n      return builder;\n    }\n\n  };\n}\n\nstyles.visible = {\n  get() {\n    const builder = createBuilder(this, this._styler, true);\n    Object.defineProperty(this, 'visible', {\n      value: builder\n    });\n    return builder;\n  }\n\n};\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (var _i2 = 0, _usedModels = usedModels; _i2 < _usedModels.length; _i2++) {\n  const model = _usedModels[_i2];\n  styles[model] = {\n    get() {\n      const level = this.level;\n      return function (...arguments_) {\n        const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n\n  };\n}\n\nfor (var _i3 = 0, _usedModels2 = usedModels; _i3 < _usedModels2.length; _i3++) {\n  const model = _usedModels2[_i3];\n  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n  styles[bgModel] = {\n    get() {\n      const level = this.level;\n      return function (...arguments_) {\n        const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n\n  };\n}\n\nconst proto = Object.defineProperties(() => {}, _objectSpread(_objectSpread({}, styles), {}, {\n  level: {\n    enumerable: true,\n\n    get() {\n      return this._generator.level;\n    },\n\n    set(level) {\n      this._generator.level = level;\n    }\n\n  }\n}));\n\nconst createStyler = (open, close, parent) => {\n  let openAll;\n  let closeAll;\n\n  if (parent === undefined) {\n    openAll = open;\n    closeAll = close;\n  } else {\n    openAll = parent.openAll + open;\n    closeAll = close + parent.closeAll;\n  }\n\n  return {\n    open,\n    close,\n    openAll,\n    closeAll,\n    parent\n  };\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n  const builder = (...arguments_) => {\n    if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {\n      // Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`\n      return applyStyle(builder, chalkTag(builder, ...arguments_));\n    } // Single argument is hot path, implicit coercion is faster than anything\n    // eslint-disable-next-line no-implicit-coercion\n\n\n    return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));\n  }; // We alter the prototype because we must return a function, but there is\n  // no way to create a function with a different prototype\n\n\n  Object.setPrototypeOf(builder, proto);\n  builder._generator = self;\n  builder._styler = _styler;\n  builder._isEmpty = _isEmpty;\n  return builder;\n};\n\nconst applyStyle = (self, string) => {\n  if (self.level <= 0 || !string) {\n    return self._isEmpty ? '' : string;\n  }\n\n  let styler = self._styler;\n\n  if (styler === undefined) {\n    return string;\n  }\n\n  const _styler2 = styler,\n        openAll = _styler2.openAll,\n        closeAll = _styler2.closeAll;\n\n  if (string.indexOf('\\u001B') !== -1) {\n    while (styler !== undefined) {\n      // Replace any instances already present with a re-opening code\n      // otherwise only the part of the string until said closing code\n      // will be colored, and the rest will simply be 'plain'.\n      string = stringReplaceAll(string, styler.close, styler.open);\n      styler = styler.parent;\n    }\n  } // We can move both next actions out of loop, because remaining actions in loop won't have\n  // any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n  // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\n\n  const lfIndex = string.indexOf('\\n');\n\n  if (lfIndex !== -1) {\n    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n  }\n\n  return openAll + string + closeAll;\n};\n\nlet template;\n\nconst chalkTag = (chalk, ...strings) => {\n  const firstString = strings[0];\n\n  if (!isArray(firstString) || !isArray(firstString.raw)) {\n    // If chalk() was called by itself or with a string,\n    // return the string itself as a string.\n    return strings.join(' ');\n  }\n\n  const arguments_ = strings.slice(1);\n  const parts = [firstString.raw[0]];\n\n  for (let i = 1; i < firstString.length; i++) {\n    parts.push(String(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'), String(firstString.raw[i]));\n  }\n\n  if (template === undefined) {\n    template = require('./templates');\n  }\n\n  return template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\nconst chalk = Chalk(); // eslint-disable-line new-cap\n\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({\n  level: stderrColor ? stderrColor.level : 0\n}); // eslint-disable-line new-cap\n\nchalk.stderr.supportsColor = stderrColor;\nmodule.exports = chalk;","map":null,"metadata":{},"sourceType":"script"}