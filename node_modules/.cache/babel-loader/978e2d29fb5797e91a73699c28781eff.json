{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\nexport default function App() {\n  // To make todos easier to follow, and keep it from doing too many things.\n  const todo = (state, action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n    }\n  }; // Reducer function\n\n\n  const todos = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return [...state, todo(undefined)];\n\n      case 'TOGGLE_TODO':\n        //How he did it:\n        return state.map(todo => {\n          if (todo.id !== action.id) {\n            return todo; //Not the todo we're looking for.\n          }\n\n          return _objectSpread(_objectSpread({}, todo), {}, {\n            completed: !todo.completed\n          });\n        });\n      //How I first did it:\n\n      /*return [\n         ...state.slice(0, action.id),\n         {\n            ...state[action.id],\n            completed: !state[action.id].completed\n         },\n         ...state.slice(action.id + 1)\n      ];*/\n      // Reducers must return the given state, for any unknown/unhandled situations.\n\n      default:\n        return state;\n    }\n  };\n\n  const testAddTodo = () => {\n    const stateBefore = [];\n    const action = {\n      type: 'ADD_TODO',\n      id: 0,\n      text: 'Learn Redux'\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  const testToggleTodo = () => {\n    const stateBefore = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: false\n    }];\n    const action = {\n      type: 'TOGGLE_TODO',\n      id: 1\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: true\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  testAddTodo();\n  testToggleTodo();\n  console.log('All tests passed.');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  }, \"Hello World\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 10\n    }\n  }, \"Do stuff.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 10\n    }\n  }, \"And things.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }\n  }, \"And more things.\"));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js"],"names":["React","ReactDOM","Redux","expect","deepFreeze","App","todo","state","action","type","todos","undefined","map","id","completed","testAddTodo","stateBefore","text","stateAfter","toEqual","testToggleTodo","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\n\nexport default function App() {\n\n   // To make todos easier to follow, and keep it from doing too many things.\n   const todo = (state, action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n\n      }\n   }\n\n   // Reducer function\n   const todos = (state = [], action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return [\n               ...state,\n               todo(undefined, )\n            ];\n\n         case 'TOGGLE_TODO':\n            //How he did it:\n            return state.map(todo => {\n               if (todo.id !== action.id) {\n                  return todo;//Not the todo we're looking for.\n               }\n               return {\n                  ...todo,\n                  completed: !todo.completed\n               };\n            })\n            //How I first did it:\n            /*return [\n               ...state.slice(0, action.id),\n               {\n                  ...state[action.id],\n                  completed: !state[action.id].completed\n               },\n               ...state.slice(action.id + 1)\n            ];*/\n\n         // Reducers must return the given state, for any unknown/unhandled situations.\n         default:\n            return state;\n      }\n   };\n\n\n   const testAddTodo = () => {\n      const stateBefore = [];\n      const action = {\n         type: 'ADD_TODO',\n         id: 0,\n         text: 'Learn Redux'\n      };\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n   };\n\n   const testToggleTodo = () => {\n      const stateBefore = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: false\n         }\n      ];\n\n      const action = {\n         type: 'TOGGLE_TODO',\n         id: 1\n      };\n\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: true\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n\n   };\n\n   testAddTodo();\n   testToggleTodo();\n   console.log('All tests passed.')\n\n   return (\n      <div className=\"App\">\n         <h1>Hello World</h1>\n         <h2>Do stuff.</h2>\n         <p>And things.</p>\n         <p>And more things.</p>\n      </div>\n   );\n\n}\n"]},"metadata":{},"sourceType":"module"}