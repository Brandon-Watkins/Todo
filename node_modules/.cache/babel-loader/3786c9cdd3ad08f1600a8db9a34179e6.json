{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nconst combineReducers = Redux.combineReducers; //Reducer handling updating individual todo objects\n\nconst todo = (state = {}, action) => {\n  console.log('<todoStore> before: id: ' + state.id + ', text: ' + state.text + ', completed: ' + state.completed + ', action: ' + action.type + ', text: ' + action.text);\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      console.log('<todoStore>ADD_TODO Received: todo id: ' + action.id + ', action: ' + action.text);\n      return {\n        id: action.id,\n        text: action.text,\n        completed: false\n      };\n\n    case 'TOGGLE_TODO':\n      if (state.id !== action.id) {\n        return state; //Not the todo we're looking for.\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        completed: !state.completed\n      });\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the list containing all todo objects\n\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, todo(undefined, action)];\n\n    case 'TOGGLE_TODO':\n      return state.map(t => todo(t, action));\n\n    case 'REMOVE_TODO':\n      return state.filter(t => t.id !== action.id);\n\n    default:\n      return state;\n  }\n}; // Reducer handling updating the visibility filter for the app\n\n\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n}; // Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\n\n\nconst todoStore = combineReducers({\n  todos,\n  visibilityFilter\n});\nexport default todoStore;","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Todo/src/todo/todoStore.js"],"names":["Redux","combineReducers","todo","state","action","console","log","id","text","completed","type","todos","undefined","map","t","filter","visibilityFilter","todoStore"],"mappings":";AAAA,OAAO,cAAP;AACA,OAAO,KAAKA,KAAZ,MAAuB,kBAAvB;MACQC,e,GAAoBD,K,CAApBC,e,EAGR;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BH,KAAK,CAACI,EAAnC,GAAwC,UAAxC,GAAqDJ,KAAK,CAACK,IAA3D,GAAkE,eAAlE,GAAoFL,KAAK,CAACM,SAA1F,GACT,YADS,GACML,MAAM,CAACM,IADb,GACoB,UADpB,GACiCN,MAAM,CAACI,IADpD;;AAEA,UAAQJ,MAAM,CAACM,IAAf;AACG,SAAK,UAAL;AACGL,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CF,MAAM,CAACG,EAAnD,GAAwD,YAAxD,GAAuEH,MAAM,CAACI,IAA1F;AACA,aAAO;AACJD,QAAAA,EAAE,EAAEH,MAAM,CAACG,EADP;AAEJC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IAFT;AAGJC,QAAAA,SAAS,EAAC;AAHN,OAAP;;AAKH,SAAK,aAAL;AACG,UAAIN,KAAK,CAACI,EAAN,KAAaH,MAAM,CAACG,EAAxB,EAA4B;AACzB,eAAOJ,KAAP,CADyB,CACZ;AACf;;AACD,6CACMA,KADN;AAEGM,QAAAA,SAAS,EAAE,CAACN,KAAK,CAACM;AAFrB;;AAIH;AACG,aAAON,KAAP;AAjBN;AAmBF,CAtBD,C,CAwBA;;;AACA,MAAMQ,KAAK,GAAG,CAACR,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACnC,UAAQA,MAAM,CAACM,IAAf;AACG,SAAK,UAAL;AACG,aAAO,CACJ,GAAGP,KADC,EAEJD,IAAI,CAACU,SAAD,EAAYR,MAAZ,CAFA,CAAP;;AAIH,SAAK,aAAL;AACG,aAAOD,KAAK,CAACU,GAAN,CAAUC,CAAC,IAAIZ,IAAI,CAACY,CAAD,EAAIV,MAAJ,CAAnB,CAAP;;AACH,SAAK,aAAL;AACG,aAAOD,KAAK,CAACY,MAAN,CAAaD,CAAC,IAAIA,CAAC,CAACP,EAAF,KAASH,MAAM,CAACG,EAAlC,CAAP;;AACH;AACG,aAAOJ,KAAP;AAXN;AAaF,CAdD,C,CAgBA;;;AACA,MAAMa,gBAAgB,GAAG,CAACb,KAAK,GAAG,UAAT,EAAqBC,MAArB,KAAgC;AACtD,UAAQA,MAAM,CAACM,IAAf;AACG,SAAK,uBAAL;AACG,aAAON,MAAM,CAACW,MAAd;;AACH;AACG,aAAOZ,KAAP;AAJN;AAMF,CAPD,C,CASA;AACA;;;AACA,MAAMc,SAAS,GAAGhB,eAAe,CAAC;AAC/BU,EAAAA,KAD+B;AAE/BK,EAAAA;AAF+B,CAAD,CAAjC;AAKA,eAAeC,SAAf","sourcesContent":["import \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nconst { combineReducers } = Redux;\n\n\n//Reducer handling updating individual todo objects\nconst todo = (state = {}, action) => {\n   console.log('<todoStore> before: id: ' + state.id + ', text: ' + state.text + ', completed: ' + state.completed + \n      ', action: ' + action.type + ', text: ' + action.text)\n   switch (action.type) {\n      case 'ADD_TODO':\n         console.log('<todoStore>ADD_TODO Received: todo id: ' + action.id + ', action: ' + action.text);\n         return {\n            id: action.id,\n            text: action.text,\n            completed:false\n         };\n      case 'TOGGLE_TODO':\n         if (state.id !== action.id) {\n            return state;//Not the todo we're looking for.\n         }\n         return {\n            ...state,\n            completed: !state.completed\n         };\n      default:\n         return state;\n   }\n}\n\n// Reducer handling updating the list containing all todo objects\nconst todos = (state = [], action) => {\n   switch (action.type) {\n      case 'ADD_TODO':\n         return [\n            ...state,\n            todo(undefined, action)\n         ];\n      case 'TOGGLE_TODO':\n         return state.map(t => todo(t, action));\n      case 'REMOVE_TODO':\n         return state.filter(t => t.id !== action.id);\n      default:\n         return state;\n   }\n};\n\n// Reducer handling updating the visibility filter for the app\nconst visibilityFilter = (state = 'SHOW_ALL', action) => {\n   switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n         return action.filter;\n      default:\n         return state;\n   }\n};\n\n// Reducer handling combining the list of todos with the visibility filter, representing the\n// final UI state\nconst todoStore = combineReducers({\n   todos,\n   visibilityFilter\n});\n\nexport default todoStore;"]},"metadata":{},"sourceType":"module"}