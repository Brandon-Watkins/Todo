{"ast":null,"code":"var _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js\";\nimport React from \"react\";\nimport \"./styles.css\";\nimport expect from \"expect\";\nexport default function App() {\n  const counter = (state = 0, action) => {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      default:\n        return state;\n    }\n  };\n\n  expect(counter(0, {\n    type: 'INCREMENT'\n  })).toEqual(1);\n  expect(counter(1, {\n    type: 'INCREMENT'\n  })).toEqual(2);\n  expect(counter(2, {\n    type: 'DECREMENT'\n  })).toEqual(1);\n  expect(counter(1, {\n    type: 'DECREMENT'\n  })).toEqual(0);\n  expect(counter(1, {\n    type: 'SOMETHING_ELSE'\n  })).toEqual(1);\n  test(\"Returns a default value(0), when given an undefined state\", () => {\n    expect(counter(undefined, {})).toEqual(0);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Hello World\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Do stuff.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }\n  }, \"And things.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 8\n    }\n  }, \"And more things.\"));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js"],"names":["React","expect","App","counter","state","action","type","toEqual","test","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,GAAT,GAAe;AAG3B,QAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,WAAL;AACG,eAAOF,KAAK,GAAG,CAAf;;AACH,WAAK,WAAL;AACG,eAAOA,KAAK,GAAG,CAAf;;AACH;AACG,eAAOA,KAAP;AANN;AAQF,GATD;;AAWGH,EAAAA,MAAM,CACHE,OAAO,CAAC,CAAD,EAAI;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAJ,CADJ,CAAN,CAEEC,OAFF,CAEU,CAFV;AAIAN,EAAAA,MAAM,CACHE,OAAO,CAAC,CAAD,EAAI;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAJ,CADJ,CAAN,CAEEC,OAFF,CAEU,CAFV;AAIAN,EAAAA,MAAM,CACHE,OAAO,CAAC,CAAD,EAAI;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAJ,CADJ,CAAN,CAEEC,OAFF,CAEU,CAFV;AAIAN,EAAAA,MAAM,CACHE,OAAO,CAAC,CAAD,EAAI;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAJ,CADJ,CAAN,CAEEC,OAFF,CAEU,CAFV;AAIAN,EAAAA,MAAM,CACHE,OAAO,CAAC,CAAD,EAAI;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAJ,CADJ,CAAN,CAEEC,OAFF,CAEU,CAFV;AAIHC,EAAAA,IAAI,CAAC,2DAAD,EAA8D,MAAM;AACrEP,IAAAA,MAAM,CACHE,OAAO,CAACM,SAAD,EAAY,EAAZ,CADJ,CAAN,CAEEF,OAFF,CAEU,CAFV;AAGF,GAJG,CAAJ;AAMA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHH,eAIG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJH,CADD;AAQF","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport expect from \"expect\";\n\nexport default function App() {\n\n\n   const counter = (state = 0, action) => {\n      switch (action.type) {\n         case 'INCREMENT':\n            return state + 1;\n         case 'DECREMENT':\n            return state - 1;\n         default:\n            return state;\n      }\n   }\n\n      expect(\n         counter(0, {type: 'INCREMENT'})\n      ).toEqual(1);\n\n      expect(\n         counter(1, {type: 'INCREMENT'})\n      ).toEqual(2);\n\n      expect(\n         counter(2, {type: 'DECREMENT'})\n      ).toEqual(1);\n\n      expect(\n         counter(1, {type: 'DECREMENT'})\n      ).toEqual(0);\n\n      expect(\n         counter(1, {type: 'SOMETHING_ELSE'})\n      ).toEqual(1);\n\n   test(\"Returns a default value(0), when given an undefined state\", () => {\n      expect(\n         counter(undefined, {})\n      ).toEqual(0);\n   });\n\n   return (\n    <div className=\"App\">\n      <h1>Hello World</h1>\n      <h2>Do stuff.</h2>\n       <p>And things.</p>\n       <p>And more things.</p>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}