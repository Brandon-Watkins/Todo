{"ast":null,"code":"import _objectSpread from \"/Users/brandon/Desktop/ReactProjects/Proj2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\nexport default function App() {\n  //Reducer handling updating individual todo objects\n  const todo = (state = {}, action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return {\n          id: action.id,\n          text: action.text,\n          completed: false\n        };\n\n      case 'TOGGLE_TODO':\n        if (state.id !== action.id) {\n          return state; //Not the todo we're looking for.\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          completed: !state.completed\n        });\n\n      default:\n        return state;\n    }\n  }; // Reducer handling updating the list containing all todo objects\n\n\n  const todos = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return [...state, todo(undefined, action)];\n\n      case 'TOGGLE_TODO':\n        return state.map(t => todo(t, action));\n\n      default:\n        return state;\n    }\n  }; // Reducer handling updating the visibility filter for the app\n\n\n  const visibilityFilter = (state = 'SHOW_ALL', action) => {\n    switch (action.type) {\n      case 'SET_VISIBILITY_FILTER':\n        return action.filter;\n\n      default:\n        return state;\n    }\n  }; //Making my own combineReducers function, to understand how it works.\n\n\n  const combineReucers = reducers => {\n    return (state = {}, action) => {\n      return Object.keys(reducers).reduce((nextState, key) => {\n        nextState[key] = reducers[key](state[key], action);\n      });\n    };\n  }; // Reducer handling combining the list of todos with the visibility filter, representing the\n  // final UI state\n  //const { combineReducers } = Redux;\n\n\n  const todoApp = combineReducers({\n    todos,\n    visibilityFilter\n  });\n  const createStore = Redux.createStore;\n  const store = createStore(todoApp);\n\n  const testAddTodo = () => {\n    const stateBefore = [];\n    const action = {\n      type: 'ADD_TODO',\n      id: 0,\n      text: 'Learn Redux'\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  const testToggleTodo = () => {\n    const stateBefore = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: false\n    }];\n    const action = {\n      type: 'TOGGLE_TODO',\n      id: 1\n    };\n    const stateAfter = [{\n      id: 0,\n      text: 'Learn Redux',\n      completed: false\n    }, {\n      id: 1,\n      text: 'Go shopping',\n      completed: true\n    }];\n    deepFreeze(stateBefore);\n    deepFreeze(action);\n    expect(todos(stateBefore, action)).toEqual(stateAfter);\n  };\n\n  testAddTodo();\n  testToggleTodo();\n  console.log('All tests passed.');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 10\n    }\n  }, \"Hello World\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 10\n    }\n  }, \"Do stuff.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 10\n    }\n  }, \"And things.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 10\n    }\n  }, \"And more things.\"));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/ReactProjects/Proj2/src/App.js"],"names":["React","ReactDOM","Redux","expect","deepFreeze","App","todo","state","action","type","id","text","completed","todos","undefined","map","t","visibilityFilter","filter","combineReucers","reducers","Object","keys","reduce","nextState","key","todoApp","combineReducers","createStore","store","testAddTodo","stateBefore","stateAfter","toEqual","testToggleTodo","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\n\nexport default function App() {\n\n   //Reducer handling updating individual todo objects\n   const todo = (state = {}, action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return {\n               id: action.id,\n               text: action.text,\n               completed:false\n            };\n         case 'TOGGLE_TODO':\n            if (state.id !== action.id) {\n               return state;//Not the todo we're looking for.\n            }\n            return {\n               ...state,\n               completed: !state.completed\n            };\n         default:\n            return state;\n      }\n   }\n\n   // Reducer handling updating the list containing all todo objects\n   const todos = (state = [], action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return [\n               ...state,\n               todo(undefined, action)\n            ];\n         case 'TOGGLE_TODO':\n            return state.map(t => todo(t, action));\n         default:\n            return state;\n      }\n   };\n\n   // Reducer handling updating the visibility filter for the app\n   const visibilityFilter = (state = 'SHOW_ALL', action) => {\n      switch (action.type) {\n         case 'SET_VISIBILITY_FILTER':\n            return action.filter;\n         default:\n            return state;\n      }\n   };\n\n   //Making my own combineReducers function, to understand how it works.\n   const combineReucers = (reducers) => {\n      return (state = {}, action) => {\n         return Object.keys(reducers).reduce(\n            (nextState, key) => {\n               nextState[key] = reducers[key](\n                  state[key],\n                  action\n               );\n            }\n         )\n      }\n   }\n\n   // Reducer handling combining the list of todos with the visibility filter, representing the\n   // final UI state\n   //const { combineReducers } = Redux;\n   const todoApp = combineReducers({\n      todos, visibilityFilter\n   });\n\n   const { createStore } = Redux;\n   const store = createStore(todoApp);\n\n\n\n   const testAddTodo = () => {\n      const stateBefore = [];\n      const action = {\n         type: 'ADD_TODO',\n         id: 0,\n         text: 'Learn Redux'\n      };\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n   };\n\n   const testToggleTodo = () => {\n      const stateBefore = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: false\n         }\n      ];\n\n      const action = {\n         type: 'TOGGLE_TODO',\n         id: 1\n      };\n\n      const stateAfter = [\n         {\n            id: 0,\n            text: 'Learn Redux',\n            completed: false\n         },\n         {\n            id: 1,\n            text: 'Go shopping',\n            completed: true\n         }\n      ];\n\n      deepFreeze(stateBefore);\n      deepFreeze(action);\n\n      expect(\n         todos(stateBefore, action)\n      ).toEqual(stateAfter);\n\n   };\n\n   testAddTodo();\n   testToggleTodo();\n   console.log('All tests passed.')\n\n   return (\n      <div className=\"App\">\n         <h1>Hello World</h1>\n         <h2>Do stuff.</h2>\n         <p>And things.</p>\n         <p>And more things.</p>\n      </div>\n   );\n\n}\n"]},"metadata":{},"sourceType":"module"}