{"version":3,"sources":["../src/multipleCounters.js"],"names":["App","addCounter","list","removeCounter","index","slice","incrementCounter","testAddCounter","listBefore","listAfter","toEqual","testRemoveCounter","testIncrementCounter","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,SAASA,GAAT,GAAe;AAE3B,QAAMC,UAAU,GAAIC,IAAD,IAAU;AAC1B,WAAO,CAAC,GAAGA,IAAJ,EAAU,CAAV,CAAP;AACF,GAFD;;AAIA,QAAMC,aAAa,GAAG,CAACD,IAAD,EAAOE,KAAP,KAAiB;AACpC,WAAO,CACJ,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcD,KAAd,CADC,EAEJ,GAAGF,IAAI,CAACG,KAAL,CAAWD,KAAK,GAAG,CAAnB,CAFC,CAAP;AAIF,GALD;;AAOA,QAAME,gBAAgB,GAAG,CAACJ,IAAD,EAAOE,KAAP,KAAiB;AACvC,WAAO,CACJ,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcD,KAAd,CADC,EAEJF,IAAI,CAACE,KAAD,CAAJ,GAAc,CAFV,EAGJ,GAAGF,IAAI,CAACG,KAAL,CAAWD,KAAK,GAAG,CAAnB,CAHC,CAAP;AAKF,GAND;;AAUA,QAAMG,cAAc,GAAG,MAAM;AAC1B,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,SAAS,GAAG,CAAC,CAAD,CAAlB;AAEA,6BAAWD,UAAX;AACA,yBACGP,UAAU,CAACO,UAAD,CADb,EAEEE,OAFF,CAEUD,SAFV;AAGF,GARD;;AAUA,QAAME,iBAAiB,GAAG,MAAM;AAC7B,UAAMH,UAAU,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAnB;AACA,UAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,EAAJ,CAAlB;AAEA,6BAAWD,UAAX;AAEA,yBACGL,aAAa,CAACK,UAAD,EAAa,CAAb,CADhB,EAEEE,OAFF,CAEUD,SAFV;AAGF,GATD;;AAWA,QAAMG,oBAAoB,GAAG,MAAM;AAChC,UAAMJ,UAAU,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAnB;AACA,UAAMC,SAAS,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAlB;AAEA,6BAAWD,UAAX;AAEA,yBACGF,gBAAgB,CAACE,UAAD,EAAa,CAAb,CADnB,EAEEE,OAFF,CAEUD,SAFV;AAGF,GATD;;AAWAF,EAAAA,cAAc;AACdI,EAAAA,iBAAiB;AACjBC,EAAAA,oBAAoB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEA,sBACG;AAAK,IAAA,SAAS,EAAC;AAAf,kBACG,uDADH,eAEG,qDAFH,eAGG,sDAHH,eAIG,2DAJH,CADH;AASF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\n\nexport default function App() {\n\n   const addCounter = (list) => {\n      return [...list, 0];\n   };\n\n   const removeCounter = (list, index) => {\n      return [\n         ...list.slice(0, index),\n         ...list.slice(index + 1)\n      ];\n   };\n\n   const incrementCounter = (list, index) => {\n      return [\n         ...list.slice(0, index),\n         list[index] + 1,\n         ...list.slice(index + 1)\n      ];\n   };\n\n\n\n   const testAddCounter = () => {\n      const listBefore = [];\n      const listAfter = [0];\n\n      deepFreeze(listBefore);\n      expect(\n         addCounter(listBefore)\n      ).toEqual(listAfter);\n   };\n\n   const testRemoveCounter = () => {\n      const listBefore = [0, 10, 20];\n      const listAfter = [0, 20];\n\n      deepFreeze(listBefore);\n\n      expect(\n         removeCounter(listBefore, 1)\n      ).toEqual(listAfter);\n   };\n\n   const testIncrementCounter = () => {\n      const listBefore = [0, 10, 20];\n      const listAfter = [0, 11, 20];\n\n      deepFreeze(listBefore);\n\n      expect(\n         incrementCounter(listBefore, 1)\n      ).toEqual(listAfter);\n   };\n\n   testAddCounter();\n   testRemoveCounter();\n   testIncrementCounter();\n   console.log('All tests passed.')\n\n   return (\n      <div className=\"App\">\n         <h1>Hello World</h1>\n         <h2>Do stuff.</h2>\n         <p>And things.</p>\n         <p>And more things.</p>\n      </div>\n   );\n\n}\n"],"file":"multipleCounters.js"}