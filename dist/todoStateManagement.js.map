{"version":3,"sources":["../src/todoStateManagement.js"],"names":["App","todo","state","action","type","id","text","completed","todos","undefined","map","t","visibilityFilter","filter","combineReducers","Redux","todoApp","createStore","store"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEe,SAASA,GAAT,GAAe;AAE3B;AACA,QAAMC,IAAI,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAClC,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,UAAL;AACG,eAAO;AACJC,UAAAA,EAAE,EAAEF,MAAM,CAACE,EADP;AAEJC,UAAAA,IAAI,EAAEH,MAAM,CAACG,IAFT;AAGJC,UAAAA,SAAS,EAAC;AAHN,SAAP;;AAKH,WAAK,aAAL;AACG,YAAIL,KAAK,CAACG,EAAN,KAAaF,MAAM,CAACE,EAAxB,EAA4B;AACzB,iBAAOH,KAAP,CADyB,CACZ;AACf;;AACD,+CACMA,KADN;AAEGK,UAAAA,SAAS,EAAE,CAACL,KAAK,CAACK;AAFrB;;AAIH;AACG,eAAOL,KAAP;AAhBN;AAkBF,GAnBD,CAH2B,CAwB3B;;;AACA,QAAMM,KAAK,GAAG,CAACN,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACnC,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,UAAL;AACG,eAAO,CACJ,GAAGF,KADC,EAEJD,IAAI,CAACQ,SAAD,EAAYN,MAAZ,CAFA,CAAP;;AAIH,WAAK,aAAL;AACG,eAAOD,KAAK,CAACQ,GAAN,CAAUC,CAAC,IAAIV,IAAI,CAACU,CAAD,EAAIR,MAAJ,CAAnB,CAAP;;AACH;AACG,eAAOD,KAAP;AATN;AAWF,GAZD,CAzB2B,CAuC3B;;;AACA,QAAMU,gBAAgB,GAAG,CAACV,KAAK,GAAG,UAAT,EAAqBC,MAArB,KAAgC;AACtD,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,uBAAL;AACG,eAAOD,MAAM,CAACU,MAAd;;AACH;AACG,eAAOX,KAAP;AAJN;AAMF,GAPD,CAxC2B,CAiD3B;AACA;;;AAlD2B,QAmDnBY,eAnDmB,GAmDCC,KAnDD,CAmDnBD,eAnDmB;AAoD3B,QAAME,OAAO,GAAGF,eAAe,CAAC;AAC7BN,IAAAA,KAD6B;AAE7BI,IAAAA;AAF6B,GAAD,CAA/B;AApD2B,QAyDnBK,WAzDmB,GAyDHF,KAzDG,CAyDnBE,WAzDmB;AA0D3B,QAAMC,KAAK,GAAGD,WAAW,CAACD,OAAD,CAAzB;AAGF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\nimport deepFreeze from \"deep-freeze\";\n\nexport default function App() {\n\n   //Reducer handling updating individual todo objects\n   const todo = (state = {}, action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return {\n               id: action.id,\n               text: action.text,\n               completed:false\n            };\n         case 'TOGGLE_TODO':\n            if (state.id !== action.id) {\n               return state;//Not the todo we're looking for.\n            }\n            return {\n               ...state,\n               completed: !state.completed\n            };\n         default:\n            return state;\n      }\n   }\n\n   // Reducer handling updating the list containing all todo objects\n   const todos = (state = [], action) => {\n      switch (action.type) {\n         case 'ADD_TODO':\n            return [\n               ...state,\n               todo(undefined, action)\n            ];\n         case 'TOGGLE_TODO':\n            return state.map(t => todo(t, action));\n         default:\n            return state;\n      }\n   };\n\n   // Reducer handling updating the visibility filter for the app\n   const visibilityFilter = (state = 'SHOW_ALL', action) => {\n      switch (action.type) {\n         case 'SET_VISIBILITY_FILTER':\n            return action.filter;\n         default:\n            return state;\n      }\n   };\n\n   // Reducer handling combining the list of todos with the visibility filter, representing the\n   // final UI state\n   const { combineReducers } = Redux;\n   const todoApp = combineReducers({\n      todos,\n      visibilityFilter\n   });\n\n   const { createStore } = Redux;\n   const store = createStore(todoApp);\n\n\n}"],"file":"todoStateManagement.js"}