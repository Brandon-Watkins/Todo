{"version":3,"sources":["../src/counter.js"],"names":["App","counter","state","action","type","Counter","value","onIncrement","onDecrement","createStore","reducer","listeners","getState","dispatch","forEach","listener","subscribe","push","filter","l","store","render","ReactDOM","document","getElementById"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,SAASA,GAAT,GAAe;AAE3B,QAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACG,WAAK,WAAL;AACG,eAAOF,KAAK,GAAG,CAAf;;AACH,WAAK,WAAL;AACG,eAAOA,KAAK,GAAG,CAAf;;AACH;AACG,eAAOA,KAAP;AANN;AAQF,GATD;;AAWA,QAAMG,OAAO,GAAG,CAAC;AACGC,IAAAA,KADH;AAEGC,IAAAA,WAFH;AAGGC,IAAAA;AAHH,GAAD,kBAKb,uDACG,yCAAKF,KAAL,CADH,eAEG;AAAQ,IAAA,OAAO,EAAEE;AAAjB,SAFH,eAGG;AAAQ,IAAA,OAAO,EAAED;AAAjB,SAHH,CALH;;AAYA;AAAC;;;;AAGE;;AAEH,QAAME,WAAW,GAAIC,OAAD,IAAa;AAC9B,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIT,KAAJ;;AACA,UAAMU,QAAQ,GAAG,MAAMV,KAAvB;;AAEA,UAAMW,QAAQ,GAAIV,MAAD,IAAY;AAC1BD,MAAAA,KAAK,GAAGQ,OAAO,CAACR,KAAD,EAAQC,MAAR,CAAf;AACAQ,MAAAA,SAAS,CAACG,OAAV,CAAkBC,QAAQ,IAAIA,QAAQ,EAAtC;AACF,KAHD;;AAKA,UAAMC,SAAS,GAAID,QAAD,IAAc;AAC7BJ,MAAAA,SAAS,CAACM,IAAV,CAAeF,QAAf;AACA,aAAO,MAAM;AACVJ,QAAAA,SAAS,GAAGA,SAAS,CAACO,MAAV,CAAiBC,CAAC,IAAIA,CAAC,KAAKJ,QAA5B,CAAZ;AACF,OAFD;AAGF,KALD;;AAMA;AAAC;;;;;;AAKE;AAEH;AAAC;AAAkF;AACnFF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEA,WAAO;AAAED,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBG,MAAAA;AAAtB,KAAP;AACF,GA3BD;;AA6BA,QAAMI,KAAK,GAAGX,WAAW,CAACR,OAAD,CAAzB;;AAEA,QAAMoB,MAAM,GAAG,MAAM;AAClBC,sBAASD,MAAT,eACG,6BAAC,OAAD;AACG,MAAA,KAAK,EAAED,KAAK,CAACR,QAAN,EADV;AAEG,MAAA,WAAW,EAAE,MACVQ,KAAK,CAACP,QAAN,CAAe;AACZT,QAAAA,IAAI,EAAE;AADM,OAAf,CAHN;AAOG,MAAA,WAAW,EAAE,MACVgB,KAAK,CAACP,QAAN,CAAe;AACZT,QAAAA,IAAI,EAAE;AADM,OAAf;AARN,MADH,EAcGmB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAdH;AAgBF,GAjBD;;AAmBAJ,EAAAA,KAAK,CAACJ,SAAN,CAAgBK,MAAhB;AACAA,EAAAA,MAAM;AAMN;AAAC;;;;;;;;;;;;;;;;;;;;AAwBE;AAEH,sBACG;AAAK,IAAA,SAAS,EAAC;AAAf,kBACG,uDADH,eAEG,qDAFH,eAGG,sDAHH,eAIG,2DAJH,CADH;AAQF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport * as Redux from \"@reduxjs/toolkit\";\nimport expect from \"expect\";\n\nexport default function App() {\n\n   const counter = (state = 0, action) => {\n      switch (action.type) {\n         case 'INCREMENT':\n            return state + 1;\n         case 'DECREMENT':\n            return state - 1;\n         default:\n            return state;\n      }\n   }\n\n   const Counter = ({\n                       value,\n                       onIncrement,\n                       onDecrement\n                    }) => (\n      <div>\n         <h1>{value}</h1>\n         <button onClick={onDecrement}>-</button>\n         <button onClick={onIncrement}>+</button>\n      </div>\n   );\n\n   {/* Creating my own createStore method below, to understand it. It is mostly the same as the\n      one that ships with Redux.\n      const { createStore } = Redux;\n   */}\n\n   const createStore = (reducer) => {\n      let listeners = [];\n      let state;\n      const getState = () => state;\n\n      const dispatch = (action) => {\n         state = reducer(state, action);\n         listeners.forEach(listener => listener());\n      };\n\n      const subscribe = (listener) => {\n         listeners.push(listener);\n         return () => {\n            listeners = listeners.filter(l => l !== listener);\n         };\n      };\n      {/*\n         this returns a function, that can remove. it doesn't run said function. ie.\n         const remove = subscribe(myListener);\n         // later:\n         remove();\n      */}\n\n      {/* dispatch a dummy state, just to get the reducer to return an initial value. */}\n      dispatch({});\n\n      return { getState, dispatch, subscribe };\n   };\n\n   const store = createStore(counter);\n\n   const render = () => {\n      ReactDOM.render(\n         <Counter\n            value={store.getState()}\n            onIncrement={() =>\n               store.dispatch({\n                  type: 'INCREMENT'\n               })\n            }\n            onDecrement={() =>\n               store.dispatch({\n                  type: 'DECREMENT'\n               })\n            }\n         />,\n         document.getElementById('root')\n      );\n   };\n\n   store.subscribe(render);\n   render();\n\n\n\n\n\n   {/* Counter tests\n   expect(\n      counter(0, {type: 'INCREMENT'})\n   ).toEqual(1);\n\n   expect(\n      counter(1, {type: 'INCREMENT'})\n   ).toEqual(2);\n\n   expect(\n      counter(2, {type: 'DECREMENT'})\n   ).toEqual(1);\n\n   expect(\n      counter(1, {type: 'DECREMENT'})\n   ).toEqual(0);\n\n   expect(\n      counter(1, {type: 'SOMETHING_ELSE'})\n   ).toEqual(1);\n\n   expect(\n      counter(undefined, {})\n   ).toEqual(0);\n   */}\n\n   return (\n      <div className=\"App\">\n         <h1>Hello World</h1>\n         <h2>Do stuff.</h2>\n         <p>And things.</p>\n         <p>And more things.</p>\n      </div>\n   );\n}\n"],"file":"counter.js"}